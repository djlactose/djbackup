#!/usr/bin/sh
. /etc/djbackup/djbackup.conf

checkAppUpdate(){
  #Download script from Github
  md5=`md5sum $0 |cut -d " " -f 1`
  curl -o /tmp/djbackup https://raw.githubusercontent.com/djlactose/djbackup/master/djbackup
  #has file
  if [ -f "/tmp/djbackup" ]
  then
    newmd5=`md5sum /tmp/djbackup |cut -d " " -f 1`
  else
    newmd5=$md5
  fi
  #Compare hashes to see if they are different
  if [ "$newmd5" != "$md5" ]
  then
    if grep -q https://raw.githubusercontent.com/djlactose/djbackup/master/djbackup "/tmp/djbackup"; then
      chmod 755 $0.tmp
      mv /tmp/djbackup $0.tmp
    fi
  else
    if [ -f "/tmp/djbackup" ]
    then
      echo ""
      echo "No Application Update found"
      rm /tmp/djbackup
    fi
  fi
  #Install new script
  if [ -f "$0.tmp" ]
  then
    echo ""
    echo "Application Update found, applying update"
    rm $0
    mv $0.tmp $0
  fi
}  

checkConfUpdate(){
  #Download config from Github to tmp directory
  md5=`md5sum /etc/djbackup/djbackup.conf.sample |cut -d " " -f 1`
  curl -o /tmp/djbackup.conf.sample https://raw.githubusercontent.com/djlactose/djbackup/master/djbackup.conf.sample
  #has file
  if [ -f "/tmp/djbackup.conf.sample" ]
  then
    newmd5=`md5sum /tmp/djbackup.conf.sample |cut -d " " -f 1`
  else
    newmd5=$md5
  fi
  #Compare hashes to see if they are different
  if [ "$newmd5" != "$md5" ]
  then
    mv /tmp/djbackup.conf.sample /etc/djbackup/djbackup.conf.sample.tmp
  else
    if [ -f "/tmp/djbackup.conf.sample" ]
    then
      echo ""
      echo "No Sample Config Update found"
      rm /tmp/djbackup.conf.sample
    fi
  fi
  #Install new script
  if [ -f "/etc/djbackup/djbackup.conf.sample.tmp" ]
  then
    echo ""
    echo "Config sample Update found, applying update"
    rm /etc/djbackup/djbackup.conf.sample
    mv /etc/djbackup/djbackup.conf.sample.tmp /etc/djbackup/djbackup.conf.sample
  fi
}

BaseFilename=$OutFile
OutFile=$(date +%Y%m%d)$OutFile
BkDir="$BkDir /etc/djbackup"
SwarmBK="/etc/djbackup/docker_swarm_bk.json"
ContainerBK="/etc/djbackup/docker_container_bk.json"

while [[ $# -gt 0 ]]
do
  key="$1"
  case $key in
  -c|--nocloud) #Don't backup to the cloud
    CloudBK=0
    shift
    ;;
  -C|--nocron) #Don't backup to the cloud
    CloudBK=0
    shift
    ;;
  -e|--noencrypt) #Don't backup to the cloud
    EncryptBackup=0
    shift
    ;;
  -m|--nomysql) #Don't backup to the cloud
    CloudBK=0
    shift
    ;;
  -r|--norpm) #Don't backup to the cloud
    SecondCopy=0
    shift
    ;;
  -s|--nosecond) #Don't backup to the cloud
    SecondCopy=0
    shift
    ;;
  -u|--update) #Check for updates
    checkAppUpdate
    checkConfUpdate
    exit 0
    ;;
  -x|--nocleanup) #Don't backup to the cloud
    Cleanup=0
    SecondCopies=0
    shift
    ;;
  *)
    echo "Usage: $0 [-c] [-C] [-e] [-m] [-r] [-s] [-u] [-x]

-c | --nocloud     Run backup but don't send it to the cloud
-C | --nocron      Run backup but don't backup cron
-e | --noencrypt   Run backup but don't encrypt it
-m | --nomysql     Run backup but don't backup mysql
-r | --norpm       Run backup but don't backup the rpm list
-s | --nosecond    Run backup but don't copy the backup to the second location
-u | --update      Checks for updates to the script
-x | --nocleanup   Run backup but don't remove old copies"
    exit 1
    ;;
  esac
done

#Pid File Check
if [ -f "$pidFile" ]
then 
    if [ $(ps -ef|grep -c $(cat $pidFile)) -gt 1 ]
    then
	echo "Backup Already in progress" | tee -a $LogFile
	exit 1
    else
	rm $pidFile
    fi
fi

#Run pre-execution command before backup
$($preCom)

#Email Report start writting out to a temp file to be able to send the report
if [ "$EmailReport" -eq "1" ]
then
	TmpLog=$LogFile
	LogFile="/tmp/tmp.log"
fi

#Start of report formating
echo "*****************************************************************" | tee -a $LogFile
echo "*****************************************************************" | tee -a $LogFile
echo "" | tee -a $LogFile
date | tee -a $LogFile
echo "" | tee -a $LogFile
echo "" | tee -a $LogFile


#Backup Code started
echo $$ > $pidFile
echo "" | tee -a $LogFile
echo "Output file: " | tee -a $LogFile
echo "" | tee -a $LogFile


#Installed RPM List Generation
if [ "$RPMBackup" -eq "1" ]
then
        rpm -qa > $RPMFile
fi


#MySQL Backup started
if [ "$MySQLDump" -eq "1" ] 
then
    echo "Starting Dump of MySQL Databases..." | tee -a $LogFile
    mysqldump --user=$MySQLUser --password=$MySQLPassword -A > $MySQLLocation
    chmod 700 $MySQLLocation
    echo "Done Dumping MySQL Databases..." | tee -a $LogFile
    echo "" | tee -a $LogFile
fi

#Cron Backup Started
if [ "$CronBackup" -eq "1" ]
then
    echo "Adding Cron Files to backup list..." | tee -a $LogFile
    BkDir="$BkDir /var/spool/cron/"
    echo "" | tee -a $LogFile
fi

#Docker Swarm Backup Started
if [ "$DockerSwarm" -eq "1" ]
then
    echo "Adding Docker Swarm Configuration Files to backup list..." | tee -a $LogFile
    docker service ls -q | xargs docker service inspect > $SwarmBK
    echo "" | tee -a $LogFile
fi

#Docker Container Backup Started
if [ "$DockerContainer" -eq "1" ]
then
    echo "Adding Docker Container Configuration Files to backup list..." | tee -a $LogFile
    docker service ls -q | xargs docker service inspect > $ContainerBK
    echo "" | tee -a $LogFile
fi

#This will check if differential backup is on and then run one if it is.
if [ "$DiffBackup" -eq "1" ]
then
    #Checks the current day of the week to see if it is the day the differential is supposed to be run
    weekDay=$(date|cut -d " " -f 1)
    if [ "$weekDay" == "$DiffWkDay" ]
    then
         parms="-g /etc/djbackup/filelist.txt --level=0"
         OutFile=$OutFile.full
    else
         parms="-g /etc/djbackup/filelist.txt --level=1"
         OutFile=$OutFile.inc
    fi
else
    parms=""
fi

if [ "$EncryptBackup" -eq "1" ]
then
    echo "Backing up $BkDir" | tee -a $LogFile
    echo $EncryptPassphrase > /etc/djbackup/.encrypt_pass
    chmod 700 /etc/djbackup/.encrypt_pass
    OutFile=$OutFile.tgz.gpg
    if [ -f "$OutDir$OutFile" ]
    then
	OutFile=$OutFile.$(date +%H%M%S)
    fi
    tar $parms -pcz $BkDir| gpg --batch --passphrase-file=/etc/djbackup/.encrypt_pass -c -o $OutDir$OutFile
    rm /etc/djbackup/.encrypt_pass
else
    echo "Backing up $BkDir" | tee -a $LogFile
    OutFile=$OutFile.tgz
    if [ -f "$OutDir$OutFile" ]
    then
        OutFile=$OutFile.$(date +%H%M%S)
    fi
    tar $parms -pczvf $OutDir$OutFile $BkDir | tee -a $LogFile
fi
echo "" | tee -a $LogFile
echo "Backup completed:" | tee -a $LogFile
date | tee -a $LogFile
echo "" | tee -a $LogFile
rm $pidFile
#####################################################
#####################################################
#####################################################

#Create remote copy
if [ "$RemoteCopy" -eq "1" ] 
then
    echo "Remote Copy Starting..." | tee -a $LogFile
    rsync -az $OutDir$OutFile $RemoteUsername@$RemoteServer:$RemotePath/$OutFile | tee -a $LogFile
    echo "" | tee -a $LogFile
fi

#Google Cloud Bucket Copy
if [ "$CloudBK" == "G" ]
then
    echo "Cloud Backup Starting in background..." | tee -a $LogFile
    bucketPath=$(echo $bucketPath | sed  '/^\// s///')
    nohup gsutil cp $OutDir$OutFile gs://$bucket/$bucketPath > /dev/null &
fi

#Create second local copy
if [ "$SecondCopy" -eq "1" ]
then
    cp -p $OutDir$OutFile $SecondDevice
    echo "" | tee -a $LogFile
    echo "Copied $OutDir$OutFile to $SecondDevice." | tee -a $LogFile
    Count=1
    echo "" | tee -a $LogFile
    echo "Cleaning Up Old Second Backups..." | tee -a $LogFile
    echo "" | tee -a $LogFile
    echo "Removed the Following Second Backups:" | tee -a $LogFile
    for file in $(ls -t $SecondDevice | grep -v lost |grep $BaseFilename); do
	if [ "$Count" -gt "$SecondCopies" ]
	then
	    echo $file | tee -a $LogFile
	    rm -f $SecondDevice/$file | tee -a $LogFile
	fi
	let Count++
    done
fi

#Clean up RPM Backup
if [ "$RPMBackup" -eq "1" ]
then
    rm $RPMFile
fi

#Clean up mySQL backup
if [ "$MySQLDump" -eq "1" ] 
then
    rm $MySQLLocation
fi

#Clean up mySQL backup
if [ "$DockerSwarm" -eq "1" ] 
then
    rm $SwarmBK
fi

#Clean up mySQL backup
if [ "$DockerContainer" -eq "1" ] 
then
    rm $ContainerBK
fi

#Cleanup backups
if [ "$Cleanup" -eq "1" ] 
then
    Count=1
    echo "" | tee -a $LogFile
    echo "Cleaning Up Old Backups..." | tee -a $LogFile
    echo "" | tee -a $LogFile
    echo "Removed the Following Backups:" | tee -a $LogFile
    if [ "$DiffBackup" -eq "1" ]
    then
        #Checks the current day of the week to see if it is the day the differential is supposed to be run
        weekDay=$(date|cut -d " " -f 1)
        if [ "$weekDay" == "$DiffWkDay" ]
        then
	  for file in $(ls -t $OutDir | grep -v lost | grep $BaseFilename); do
            if [ "$Count" -gt "$RemoveCount" ]
            then
                echo $file | tee -a $LogFile
                rm -f $OutDir$file | tee -a $LogFile
            fi
            let Count++
          done
	else
	  for file in $(ls -t $OutDir | grep -v lost |grep -v full | grep $BaseFilename); do
            if [ "$Count" -gt "$RemoveCount" ]
            then
               echo $file | tee -a $LogFile
       	       rm -f $OutDir$file | tee -a $LogFile
       	     fi
       	     let Count++
          done
        fi
    else
	for file in $(ls -t $OutDir | grep -v lost | grep $BaseFilename); do
	  if [ "$Count" -gt "$RemoveCount" ]
	  then
	      echo $file | tee -a $LogFile
	      rm -f $OutDir$file | tee -a $LogFile
	  fi
	  let Count++
	done
    fi
fi


#Log Formating of ending
echo "" | tee -a $LogFile
echo "" | tee -a $LogFile
echo "Finished at: " | tee -a $LogFile
date | tee -a $LogFile
echo "" | tee -a $LogFile
echo "*****************************************************************" | tee -a $LogFile
echo "*****************************************************************" | tee -a $LogFile


#Create email and send it out using the temp file that was created
if [ "$EmailReport" -eq "1" ]
then
	cat $LogFile | mail -s "Backup Report" $EmailTo
	cat $LogFile >> $TmpLog
	rm $LogFile
fi

#Run Post-processing command
$($postCom)

#Check for updates
checkAppUpdate
checkConfUpdate